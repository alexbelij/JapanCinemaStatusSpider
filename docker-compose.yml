version: "3"
services:
  crawler:
    build:
      context: .
      dockerfile: ./docker/crawler/Dockerfile
      args:
        - USE_MIRROR=${USE_MIRROR:-0}
    volumes: 
      - ./crawler:/app
    working_dir: /app
    depends_on:
      - kafka
      - redis
      - zookeeper
      - postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PROXY_ADDRESS=${PROXY_ADDRESS:-10.0.2.2}
      - PROXY_PORT=${PROXY_PORT:-1080}
      - PROXY_TYPE=${PROXY_TYPE:-socks5}
    command: scrapy crawl --all_spiders
    deploy:
      mode: global
      restart_policy:
        delay: 5s
        max_attempts: 5
        window: 60s
  scheduler:
    build:
      context: .
      dockerfile: ./docker/scheduler/Dockerfile
      args:
        - USE_MIRROR=${USE_MIRROR:-0}
    environment:
      ZOOKEEPER_HOST: zookeeper:2181
      JS_ZOOKEEPER_PATH: /japancinemastatusspider/spiders/
      JS_ZOOKEEPER_ID: all
    volumes: 
      - ./scheduler:/app
    working_dir: /app
    depends_on:
      - kafka
      - redis
      - zookeeper
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        delay: 5s
        max_attempts: 5
        window: 60s
  data_processor:
    build:
      context: .
      dockerfile: ./docker/data_processor/Dockerfile
      args:
        - USE_MIRROR=${USE_MIRROR:-0}
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes: 
      - ./data_processor:/app
    working_dir: /app
    depends_on:
      - kafka
      - redis
      - zookeeper
      - postgres
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        delay: 5s
        max_attempts: 5
        window: 60s
  kafka_monitor:
    build:
      context: https://github.com/gas1121/scrapy-cluster.git#custom-dev
      dockerfile: docker/kafka-monitor/Dockerfile.py3
    depends_on:
      - kafka
      - redis
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        delay: 5s
        max_attempts: 5
        window: 60s
  redis_monitor:
    build:
      context: https://github.com/gas1121/scrapy-cluster.git#custom-dev
      dockerfile: docker/redis-monitor/Dockerfile.py3
    depends_on:
      - kafka
      - redis
      - zookeeper
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        delay: 5s
        max_attempts: 5
        window: 60s
  rest:
    build:
      context: https://github.com/gas1121/scrapy-cluster.git#custom-dev
      dockerfile: docker/rest/Dockerfile.py3
    depends_on:
      - kafka
      - redis
    restart: always
    ports:
      - "8888:5343"
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        delay: 5s
        max_attempts: 5
        window: 60s
  zookeeper:
    image: zookeeper
    ports:
      - "2181:2181"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        delay: 5s
        max_attempts: 5
        window: 60s
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        delay: 5s
        max_attempts: 5
        window: 60s
  postgres:
    image: library/postgres:alpine
    expose:
      - "5432"
    volumes:
      - pgdata:${PGDATA:-/var/lib/postgresql/data}
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=${PGDATA:-/var/lib/postgresql/data}
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        delay: 5s
        max_attempts: 5
        window: 60s
  psql:
    image: library/postgres:alpine
    command: psql -h postgres -p 5432 -U ${POSTGRES_USER} -W ${POSTGRES_PASSWORD}
  pgweb:
    image: sosedoff/pgweb
    depends_on: 
      - postgres
    ports: 
      - "8081:8081"
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    # TODO not needed in production
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        delay: 5s
        max_attempts: 5
        window: 60s
  phantomjs:
    image: wernight/phantomjs:2
    expose:
      - "8910"
    volumes: 
      - .:/app
    command: phantomjs --proxy=${PROXY_ADDRESS:-10.0.2.2}:${PROXY_PORT:-1080} --proxy-type=${PROXY_TYPE:-socks5} --webdriver=8910
  redis:
    image: library/redis:alpine
    expose:
      - "6379"
    volumes:
      - redisdata:${PGWEB_PORT:-/data}
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        delay: 5s
        max_attempts: 5
        window: 60s
volumes:
  pgdata:
  redisdata:
